{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/counterButton.jsx","components/header.jsx","constants.js","containers/App.js","actions.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","React","Component","Header","memo","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","ServiceWorker","register"],"mappings":"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","file":"static/js/main.5b688225.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n\r\n\r\n\r\nclass CounterButton extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(this.state.count !== nextState.count) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return { count: this.state.count + 1 }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count} </button>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CounterButton","import React from 'react';\r\nimport CounterButton from './counterButton';\r\n\r\nconst Header = React.memo( () => {\r\n        return(\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        ); \r\n})\r\n\r\nexport default Header;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/header';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport {connect} from 'react-redux';\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n        CHANGE_SEARCH_FIELD, \r\n        REQUEST_ROBOTS_FAILED, \r\n        REQUEST_ROBOTS_PENDING, \r\n        REQUEST_ROBOTS_SUCCESS } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n        dispatch({type: REQUEST_ROBOTS_PENDING});\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch( error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_FAILED,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS \r\n    } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider} from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons'; \r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root'));\r\n\r\nServiceWorker.register();\r\n"],"sourceRoot":""}