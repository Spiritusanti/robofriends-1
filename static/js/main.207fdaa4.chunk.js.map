{"version":3,"sources":["constants.js","components/Card/Card.jsx","components/CardList/CardList.jsx","components/SearchBox/SearchBox.jsx","components/Scroll/Scroll.jsx","components/CounterButton/counterButton.jsx","components/Header/header.jsx","components/MainPage/MainPage.jsx","containers/App.jsx","actions.js","serviceWorkerRegistration.js","reducers.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","React","Component","Header","memo","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.207fdaa4.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\nimport './Card.styles.css';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label=\"Search Robots\"\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n\r\n\r\n\r\nclass CounterButton extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(this.state.count !== nextState.count) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return { count: this.state.count + 1 }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button id='counter' color={this.props.color} onClick={this.updateCount}>Count: {this.state.count} </button>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CounterButton;","import React from 'react';\r\nimport CounterButton from '../CounterButton/counterButton';\r\n\r\nconst Header = React.memo( () => {\r\n        return(\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        ); \r\n})\r\n\r\nexport default Header;","import React from 'react';\r\nimport CardList from '../CardList/CardList';\r\nimport SearchBox from '../SearchBox/SearchBox';\r\nimport Scroll from '../Scroll/Scroll';\r\nimport Header from '../Header/header';\r\nimport './MainPage.styles.css';\r\n\r\nclass MainPage extends React.Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  filterRobots = () => {\r\n        return this.props.robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { onSearchChange, isPending } = this.props;\r\n\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <CardList robots={this.filterRobots()} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions' \r\nimport MainPage from '../components/MainPage/MainPage';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return <MainPage {...this.props}/>\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n        CHANGE_SEARCH_FIELD, \r\n        REQUEST_ROBOTS_FAILED, \r\n        REQUEST_ROBOTS_PENDING, \r\n        REQUEST_ROBOTS_SUCCESS } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n        dispatch({type: REQUEST_ROBOTS_PENDING});\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch( error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_FAILED,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS \r\n    } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider} from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport 'tachyons'; \r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root'));\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}